buildscript {
  dependencies {
    classpath files("${project.pluginTestDir}/hadoop-plugin-${project.version}.jar", "${project.pluginTestDir}/hadoop-plugin-${project.version}-SNAPSHOT.jar")
  }
}

apply plugin: com.linkedin.gradle.hadoop.HadoopPlugin

// Test cases for using hadoopClosure DSL syntax

definitionSet name: 'closure1', defs: [
  var1 : 'val1_closure1',
  var2 : true
]

definitionSet name: 'closure2', defs: [
  var1 : 'val1_closure2',
  var2 : false
]

// First, we'll test anonymous closures

hadoopClosure closure: {
  // Users should usually encapsulate Hadoop DSL elements they declare in a
  // closure within a namespace so that the fully-qualified element names will
  // be unique.
  namespace(definitionSetName()) {
    workflow('workflow1') {
      pigJob('pigJob1') {
        uses 'src/main/pig/pigScript.pig'
        reads files: [
          'path1' : '/user/foo'
        ]
        writes files: [
          'path2' : '/user/bar'
        ]
        set parameters: [
          // The typical use case for hadoopClosures will be to parameterize values
          'param1' : lookupDef('var1')
        ]
      }

      // Another use case is to customize runtime logic per definition set
      if (lookupDef('var2')) {
        noOpJob('noOpJob1') {
          depends 'pigJob1'
        }
        targets 'noOpJob1'
      }
      else {
        targets 'pigJob1'
      }
    }
  }
}

hadoopClosure closure: {
  namespace(definitionSetName()) {
    workflow('workflow2') {
      noOpJob('noOpJob1') {
        set properties: [
          'foo' : 'bar'
        ]
      }
      targets 'noOpJob1'
    }
  }
}

hadoop {
  buildPath "jobs"
  cleanPath false

  // Evaluate the anonymous closures
  evalHadoopClosures 'closure1'
  evalHadoopClosures defs: 'closure2', targetName: 'hadoop'
}

// Now define a named closure
hadoopClosure name: 'namedClosure1', closure: {
  namespace(definitionSetName()) {
    propertyFile('common') {
      set properties: [
        'notify.emails': lookupDef('var1'),
        'user.to.proxy': lookupDef('var2')
      ]
    }
  }
}

// First, evaluate the named closure in global scope and with no target
evalHadoopClosure name: 'namedClosure1', defs: 'closure1'
assert(lookup('closure1.common') != null)

hadoop {
  // Now evaluate the closure in Hadoop scope
  evalHadoopClosure name: 'namedClosure1', defs: 'closure1'
  assert(lookup('closure1.common') != null)

  workflow('closuresWorkflow') { }

  // Now evaluate the closure against a specific target
  evalHadoopClosure name: 'namedClosure1', defs: 'closure1', targetName: 'closuresWorkflow'
  assert(lookup('closuresWorkflow.closure1.common') != null)
}
