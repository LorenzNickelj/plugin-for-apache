buildscript {
  dependencies {
    classpath files("${project.pluginTestDir}/hadoop-plugin-${project.version}.jar", "${project.pluginTestDir}/hadoop-plugin-${project.version}-SNAPSHOT.jar")
  }
}

apply plugin: com.linkedin.gradle.hadoop.HadoopPlugin

// Test that the static checker catches more complicated read-write races in a workflow.
hadoop {
  buildPath "jobs"
  cleanPath false

  workflow('readWriteRace2') {
    job('job1') {
      reads files: [
        'foobarbazz' : '/data/databases/foobarbazz'
      ]
      writes files: [
        'foo' : '/data/databases/foo'
      ]
    }

    job('job2') {
      reads files: [
        'foo' : '/data/databases/foo'
      ]
      writes files: [
        'bar' : '/data/databases/bazz'
      ]
      depends 'job1'
    }

    job('job3') {
      reads files: [
        // We'll overwrite the key foo. If foo is not overwritten, then we will get an additional
        // error in the expected output about an inferred dependency on job2, but if it is
        // overwritten, we should not. I had an error in my implementation earlier of how the read
        // and write paths were being stored that did not let you overwrite the keys you declared,
        // which you should be able to do.
        'foo' : '/data/databases/bazz'
      ]
      reads files: [
        'foo' : '/data/databases/foo'
      ]
      writes files: [
        'bazz' : '/data/databases/bazz'
      ]
      depends 'job1'
    }

    job('job4') {
      reads files: [
        'foo' : '/data/databases/foo',
        'bar' : '/data/databases/bar',
        'bazz' : '/data/databases/bazz'
      ]
      depends 'job2', 'job3'
    }

    job('job5') {
      writes files: [
        'foobarbazz' : '/data/databases/foobarbazz'  // Read by job1
      ]
      depends 'job4'
    }

    targets 'job5'
  }
}
