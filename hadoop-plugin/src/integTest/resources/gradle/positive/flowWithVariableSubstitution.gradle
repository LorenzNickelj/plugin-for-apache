plugins {
  id 'com.linkedin.gradle.hadoop.HadoopPlugin'
}

// Test generating a flow YAML file with variable substitution "${}" in the job properties, job name, dependencies and conditions

def projectPath = "."
def jobName = "uploadResourceFilesJob"
def jobName2 = "checkResultsJob"
def dependList = ["${jobName}"]
def targetList = ["${jobName2}"]
def flowDependList = ["${jobName}"]

hadoop {
  buildPath "jobs/flowWithVariableSubstitution"
  cleanPath true
  generateYamlOutput true

  propertyFile('common') {
    set properties: [
      'user.to.proxy': 'foo'
    ]
  }

  workflow('wordCountFlow') {
    hadoopShellJob("${jobName}") {
      usesCommands([
          "hadoop fs -mkdir -p ${projectPath}",
          "hadoop fs -copyFromLocal -f ./text ${projectPath}"
      ])
    }

    hadoopJavaJob('wordCountMapReduceJob') {
      uses 'com.linkedin.hadoop.example.WordCountJob'
      jvmClasspath './lib/*'
      reads files: [
          'input.path': "${projectPath}/text"
      ]
      writes files: [
          'output.path': "${projectPath}/word-count-map-reduce"
      ]
      set confProperties: [
          'mapreduce.job.classloader': true
      ]
      set properties: [
          'force.output.overwrite': true
      ]
      depends dependList
      conditions '${' + "${jobName}" + ':param1} == "foo"'
    }

    workflow("embeddedFlow") {
      commandJob("job1") {
        uses 'pwd'
      }
      flowDepends clear: 'false', targetNames: flowDependList
      targets 'job1'
    }

    def keywordToCheck = "Government"

    hadoopShellJob("${jobName2}") {
      uses "bash ./bash/checkResults.sh ${projectPath} ${keywordToCheck}"
      depends 'wordCountMapReduceJob', 'embeddedFlow'
    }

    targets targetList
  }
}
